(set nth (fn (n lst)
  (while (< 0 n)
    (set n (-- n))
    (set lst (cdr lst)))
  (if (== n 0) (car lst))
))


(set rev (fn (lst)
  (let res nil)
  (while lst
    (set res (cons (car lst) res))
    (set lst (cdr lst))
  )
  res
))


(set map (fn (f lst)
  (let res nil)
  (while lst
    (set res (cons (f (car lst)) res))
    (set lst (cdr lst))
  )
  (rev res)
))


(set print-grid (fn (grid)
  (map
    (fn (row)
      (print (map (fn (x) (if (== x 0) '- '#)) row))
    )
    grid
  )
))


(set get-cell (fn (grid x y)
  (or (nth x (nth y grid)) 0)
))


(set next-cell (fn (grid cell x y)
  (let n (+
    (get-cell grid (-- x)  (-- y))
    (get-cell grid (-- x)  y      )
    (get-cell grid (-- x)  (++ y))
    (get-cell grid x        (-- y))
    (get-cell grid x        (++ y))
    (get-cell grid (++ x)  (-- y))
    (get-cell grid (++ x)  y      )
    (get-cell grid (++ x)  (++ y))
  ))
  (if
    (and (== cell 1) (or (== n 2) (== n 3))) 1
    (and (== cell 0) (== n 3)) 1
    0
  )
))


(set next-grid (fn (grid)
  (let y -1)
  (map
    (fn (row)
      (set y (++ y))
      (let x -1)
      (map
        (fn (cell)
          (set x (++ x))
          (next-cell grid cell x y)
        )
        row
      )
    )
    grid
  )
))


(set life (fn (n grid)
  (let i 1)
  (while (<= i n)
    (print ">> iteration" i)
    (print-grid grid)
    (print)
    (set grid (next-grid grid))
    (set i (++ i))
  )
))


; blinker in a 3x3 universe
(life 5 '(
  (0 1 0)
  (0 1 0)
  (0 1 0)
))


; glider in an 8x8 universe
(life 22 '(
  (0 0 1 0 0 0 0 0)
  (0 0 0 1 0 0 0 0)
  (0 1 1 1 0 0 0 0)
  (0 0 0 0 0 0 0 0)
  (0 0 0 0 0 0 0 0)
  (0 0 0 0 0 0 0 0)
  (0 0 0 0 0 0 0 0)
  (0 0 0 0 0 0 0 0)
))
